/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults } from "@stencil-community/router";
import { ButtonType, Size, ThemeColor } from "lib-design-systems";
export namespace Components {
    interface AppDetail {
        "match": MatchResults;
    }
    interface AppList {
    }
    interface AppNew {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface RetoButton {
        "color": ThemeColor;
        "disable": boolean;
        "size": Size;
        "spinner": boolean;
        "text": string;
        "type": ButtonType;
    }
    interface RetoInput {
        "color": ThemeColor;
        "disable": boolean;
        "size": Size;
        "spinner": boolean;
        "text": string;
        "type": ButtonType;
    }
    interface RetoLabel {
        "forname": string;
        "label": string;
    }
    interface UserList {
    }
}
declare global {
    interface HTMLAppDetailElement extends Components.AppDetail, HTMLStencilElement {
    }
    var HTMLAppDetailElement: {
        prototype: HTMLAppDetailElement;
        new (): HTMLAppDetailElement;
    };
    interface HTMLAppListElement extends Components.AppList, HTMLStencilElement {
    }
    var HTMLAppListElement: {
        prototype: HTMLAppListElement;
        new (): HTMLAppListElement;
    };
    interface HTMLAppNewElement extends Components.AppNew, HTMLStencilElement {
    }
    var HTMLAppNewElement: {
        prototype: HTMLAppNewElement;
        new (): HTMLAppNewElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLRetoButtonElement extends Components.RetoButton, HTMLStencilElement {
    }
    var HTMLRetoButtonElement: {
        prototype: HTMLRetoButtonElement;
        new (): HTMLRetoButtonElement;
    };
    interface HTMLRetoInputElement extends Components.RetoInput, HTMLStencilElement {
    }
    var HTMLRetoInputElement: {
        prototype: HTMLRetoInputElement;
        new (): HTMLRetoInputElement;
    };
    interface HTMLRetoLabelElement extends Components.RetoLabel, HTMLStencilElement {
    }
    var HTMLRetoLabelElement: {
        prototype: HTMLRetoLabelElement;
        new (): HTMLRetoLabelElement;
    };
    interface HTMLUserListElement extends Components.UserList, HTMLStencilElement {
    }
    var HTMLUserListElement: {
        prototype: HTMLUserListElement;
        new (): HTMLUserListElement;
    };
    interface HTMLElementTagNameMap {
        "app-detail": HTMLAppDetailElement;
        "app-list": HTMLAppListElement;
        "app-new": HTMLAppNewElement;
        "app-root": HTMLAppRootElement;
        "reto-button": HTMLRetoButtonElement;
        "reto-input": HTMLRetoInputElement;
        "reto-label": HTMLRetoLabelElement;
        "user-list": HTMLUserListElement;
    }
}
declare namespace LocalJSX {
    interface AppDetail {
        "match"?: MatchResults;
    }
    interface AppList {
        "onCustomEvent"?: (event: CustomEvent<any>) => void;
    }
    interface AppNew {
        "match"?: MatchResults;
        "onCustomEvent"?: (event: CustomEvent<any>) => void;
    }
    interface AppRoot {
    }
    interface RetoButton {
        "color"?: ThemeColor;
        "disable"?: boolean;
        "onButtonClicked"?: (event: CustomEvent<any>) => void;
        "size"?: Size;
        "spinner"?: boolean;
        "text"?: string;
        "type"?: ButtonType;
    }
    interface RetoInput {
        "color"?: ThemeColor;
        "disable"?: boolean;
        "onButtonClicked"?: (event: CustomEvent<any>) => void;
        "size"?: Size;
        "spinner"?: boolean;
        "text"?: string;
        "type"?: ButtonType;
    }
    interface RetoLabel {
        "forname"?: string;
        "label"?: string;
    }
    interface UserList {
        "onCustomEvent"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "app-detail": AppDetail;
        "app-list": AppList;
        "app-new": AppNew;
        "app-root": AppRoot;
        "reto-button": RetoButton;
        "reto-input": RetoInput;
        "reto-label": RetoLabel;
        "user-list": UserList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-detail": LocalJSX.AppDetail & JSXBase.HTMLAttributes<HTMLAppDetailElement>;
            "app-list": LocalJSX.AppList & JSXBase.HTMLAttributes<HTMLAppListElement>;
            "app-new": LocalJSX.AppNew & JSXBase.HTMLAttributes<HTMLAppNewElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "reto-button": LocalJSX.RetoButton & JSXBase.HTMLAttributes<HTMLRetoButtonElement>;
            "reto-input": LocalJSX.RetoInput & JSXBase.HTMLAttributes<HTMLRetoInputElement>;
            "reto-label": LocalJSX.RetoLabel & JSXBase.HTMLAttributes<HTMLRetoLabelElement>;
            "user-list": LocalJSX.UserList & JSXBase.HTMLAttributes<HTMLUserListElement>;
        }
    }
}
